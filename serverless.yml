service: air-remote-backend

frameworkVersion: '3'

plugins:
  - serverless-python-requirements
  - serverless-scriptable-plugin

custom:
  configFilePath: './config.json'
  corsOrigin: ${file(${self:custom.configFilePath}):corsOrigin, "https://localhost:3000"}
  scriptable:
    hooks:
      before:package:createDeploymentArtifacts: "node ./scripts/predeploy.js" 
      after:deploy:deploy: "node ./scripts/createEnv.js"

provider:
  name: aws
  runtime: python3.12
  stage: ${opt:stage, 'dev'}
  region: eu-central-1
  timeout: 30
  apiGateway:
    # restApi:
    #   minimumCompressionSize: 1024 # Optional: Adjust as needed
    #   shouldStartNameWithService: true
    restApiResources:
      CORS: true
  iamRoleStatements:
    - Effect: Allow
      Action:
        - "lambda:InvokeFunction"
      Resource:
        - "*"

  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - cognito-idp:AdminCreateUser
            - cognito-idp:AdminSetUserPassword
            - cognito-idp:AdminInitiateAuth
          Resource: "*"
        - Effect: "Allow"
          Action:
            - "events:PutRule"
            - "events:PutTargets"
            - "events:DeleteRule"
            - "events:RemoveTargets"
          Resource: "*"  

        - Effect: "Allow"
          Action:
            - "lambda:InvokeFunction"
          Resource: "*"

        - Effect: "Allow"
          Action:
            - "ce:GetCostAndUsage"
          Resource: "*"

        - Effect: Allow
          Action:
            - iam:CreateRole
            - iam:PutRolePolicy
            - iam:PassRole
            - iam:AttachRolePolicy
            - iam:GetRole
            - scheduler:CreateSchedule
            - scheduler:GetSchedule 
            - scheduler:UpdateSchedule 
            - scheduler:DeleteSchedule
          Resource: "*"

        - Effect: Allow
          Action:
            - "dynamodb:GetItem"
            - "dynamodb:PutItem"
            - "dynamodb:UpdateItem"
            - "dynamodb:DeleteItem"
            - "dynamodb:Scan"
          Resource:
            - { "Fn::GetAtt": ["ClientsTable", "Arn"] }

        - Effect: Allow
          Action:
            - "dynamodb:GetItem"
            - "dynamodb:PutItem"
            - "dynamodb:UpdateItem"
            - "dynamodb:DeleteItem"
            - "dynamodb:Scan"
          Resource:
            - { "Fn::GetAtt": ["IRRemotes", "Arn"] }

        - Effect: Allow
          Action:
            - "dynamodb:ConditionCheckItem"
            - "dynamodb:GetItem"
            - "dynamodb:PutItem"
            - "dynamodb:UpdateItem"
            - "dynamodb:DeleteItem"
            - "dynamodb:Scan"
            - "dynamodb:Query"
          Resource:
            - { "Fn::GetAtt": ["IoTDevices", "Arn"] }
        - Effect: Allow
          Action:
            - "dynamodb:ConditionCheckItem"
            - "dynamodb:GetItem"
            - "dynamodb:PutItem"
            - "dynamodb:UpdateItem"
            - "dynamodb:DeleteItem"
            - "dynamodb:Scan"
            - "dynamodb:Query"
          Resource:
            - { "Fn::GetAtt": ["Automations", "Arn"] }
        - Effect: Allow
          Action:
            - "dynamodb:ConditionCheckItem"
            - "dynamodb:GetItem"
            - "dynamodb:PutItem"
            - "dynamodb:UpdateItem"
            - "dynamodb:DeleteItem"
            - "dynamodb:Scan"
            - "dynamodb:Query"
          Resource:
            - { "Fn::GetAtt": ["RequestPool", "Arn"] }
        - Effect: Allow
          Action:
            - "dynamodb:ConditionCheckItem"
            - "dynamodb:GetItem"
            - "dynamodb:PutItem"
            - "dynamodb:UpdateItem"
            - "dynamodb:DeleteItem"
            - "dynamodb:Scan"
            - "dynamodb:Query"
          Resource:
            - { "Fn::GetAtt": ["Statistics", "Arn"] }

  environment: 
    CLIENTS_TABLE_NAME: ${self:provider.stage}WSClients
    REMOTES_TABLE_NAME: ${self:provider.stage}IRRemotes
    IOT_DEVICES_TABLE_NAME: ${self:provider.stage}IoTDevices
    REQUEST_POOL_TABLE_NAME: ${self:provider.stage}RequestPool
    AUTOMATIONS_TABLE_NAME: ${self:provider.stage}Automations
    STATISTICS_TABLE_NAME: ${self:provider.stage}Statistics
    COGNITO_USER_POOL_NAME: ${self:provider.stage}UserPool
    COGNITO_USER_POOL_CLIENT_NAME: ${self:provider.stage}UserPoolClient
    WSSAPIGATEWAYENDPOINT:
      Fn::Join:
        - ""
        - - "https://"
          - Ref: WebsocketsApi
          - ".execute-api."
          - Ref: AWS::Region
          - ".amazonaws.com/${sls:stage}"
    USER_POOL_ID: { Ref: CognitoUserPool }
    CLIENT_ID: { Ref: CognitoUserPoolClient }
    CORS_ORIGIN: ${self:custom.corsOrigin}

functions:
  signupHandler:
    handler: src/auth/signup_handler.handle
    events:
      - http:
            path: auth/signup
            method: post
            cors:  
              origin: ${self:custom.corsOrigin}
              headers:
                  - Content-Type
                  - Authorization
                  - X-Amz-Date
                  - X-Api-Key
                  - X-Amz-Security-Token
                  - X-Amz-User-Agent
              allowCredentials: true

  loginHandler:
    handler: src/auth/login_handler.handle
    events:
      - http:
            path: auth/login
            method: post
            cors:  
              origin: ${self:custom.corsOrigin}
              headers:
                  - Content-Type
                  - Authorization
                  - X-Amz-Date
                  - X-Api-Key
                  - X-Amz-Security-Token
                  - X-Amz-User-Agent
              allowCredentials: true

  refreshHandler:
    handler: src/auth/refresh_handler.handle
    events:
      - http:
            path: auth/refresh-token
            method: post
            cors:  
              origin: ${self:custom.corsOrigin}
              headers:
                  - Content-Type
                  - Authorization
                  - X-Amz-Date
                  - X-Api-Key
                  - X-Amz-Security-Token
                  - X-Amz-User-Agent
              allowCredentials: true

  logoutHandler:
    handler: src/auth/logout_handler.handle
    events:
      - http:
            path: auth/logout
            method: post
            cors:  
              origin: ${self:custom.corsOrigin}
              headers:
                  - Content-Type
                  - Authorization
                  - X-Amz-Date
                  - X-Api-Key
                  - X-Amz-Security-Token
                  - X-Amz-User-Agent
              allowCredentials: true


  automationsHandler:
    handler: src/automations_handler.handle  

  websocketHandler:
    handler: src/websockets_router.handle
    events:
      - websocket:
          route: $connect
      - websocket:
          route: $disconnect
      - websocket:
          route: cmd
      - websocket:
          route: ack
      - websocket:
          route: error

  httpDataHandler:
    handler: src/http_router.handle
    events:
      # REMOTES
      - http:
          path: /api/remotes
          method: GET
          cors:  
            origin: ${self:custom.corsOrigin}
            headers:
                - Content-Type
                - Authorization
                - X-Amz-Date
                - X-Api-Key
                - X-Amz-Security-Token
                - X-Amz-User-Agent
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
      - http:
          path: /api/remotes
          method: POST 
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
          cors:  
            origin: ${self:custom.corsOrigin}
            headers:
                - Content-Type
                - Authorization
                - X-Amz-Date
                - X-Api-Key
                - X-Amz-Security-Token
                - X-Amz-User-Agent
            allowCredentials: true     

      - http:
          path: /api/remotes/{remoteName}
          method: GET
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
          cors:  
            origin: ${self:custom.corsOrigin}
            headers:
                - Content-Type
                - Authorization
                - X-Amz-Date
                - X-Api-Key
                - X-Amz-Security-Token
                - X-Amz-User-Agent
            allowCredentials: true 
      - http:
          path: /api/remotes/{remoteName}
          method: DELETE
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
          cors:   
            origin: ${self:custom.corsOrigin}
            headers:
                - Content-Type
                - Authorization
                - X-Amz-Date
                - X-Api-Key
                - X-Amz-Security-Token
                - X-Amz-User-Agent
            allowCredentials: true 
            
      - http:
          path: /api/remotes/{remoteName}/buttons
          method: POST
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
          cors:  
            origin: ${self:custom.corsOrigin}
            headers:
                - Content-Type
                - Authorization
                - X-Amz-Date
                - X-Api-Key
                - X-Amz-Security-Token
                - X-Amz-User-Agent
            allowCredentials: true 
      - http:
          path: /api/remotes/{remoteName}/buttons/{buttonName}
          method: DELETE
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
          cors:  
            origin: ${self:custom.corsOrigin}
            headers:
                - Content-Type
                - Authorization
                - X-Amz-Date
                - X-Api-Key
                - X-Amz-Security-Token
                - X-Amz-User-Agent
            allowCredentials: true 
      # DEVICES
      - http:
          path: /api/devices
          method: GET
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
          cors:  
            origin: ${self:custom.corsOrigin}
            headers:
                - Content-Type
                - Authorization
                - X-Amz-Date
                - X-Api-Key
                - X-Amz-Security-Token
                - X-Amz-User-Agent
      - http:
          path: /api/devices
          method: POST
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
          cors:  
            origin: ${self:custom.corsOrigin}
            headers:
                - Content-Type
                - Authorization
                - X-Amz-Date
                - X-Api-Key
                - X-Amz-Security-Token
                - X-Amz-User-Agent
            allowCredentials: true 
      #delete endpoint
      - http:
          path: /api/devices/deleteme
          method: POST
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
          cors:  
            origin: ${self:custom.corsOrigin}
            headers:
                - Content-Type
                - Authorization
                - X-Amz-Date
                - X-Api-Key
                - X-Amz-Security-Token
                - X-Amz-User-Agent
            allowCredentials: true 
      - http:
          path: /api/devices/{macAddress}
          method: GET
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
          cors:  
            origin: ${self:custom.corsOrigin}
            headers:
                - Content-Type
                - Authorization
                - X-Amz-Date
                - X-Api-Key
                - X-Amz-Security-Token
                - X-Amz-User-Agent
            allowCredentials: true 
      - http:
          path: /api/devices/{macAddress}
          method: PUT
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
          cors:  
            origin: ${self:custom.corsOrigin}
            headers:
                - Content-Type
                - Authorization
                - X-Amz-Date
                - X-Api-Key
                - X-Amz-Security-Token
                - X-Amz-User-Agent
            allowCredentials: true 
      - http:
          path: /api/devices/{macAddress}
          method: DELETE
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
          cors:  
            origin: ${self:custom.corsOrigin}
            headers:
                - Content-Type
                - Authorization
                - X-Amz-Date
                - X-Api-Key
                - X-Amz-Security-Token
                - X-Amz-User-Agent
            allowCredentials: true 
      # - http:
      #     path: /api/devices/{macAddress}
      #     method: OPTIONS
      #     cors:  
      #       origin: ${self:custom.corsOrigin}
      #       headers:
      #           - Content-Type
      #           - Authorization
      #           - X-Amz-Date
      #           - X-Api-Key
      #           - X-Amz-Security-Token
      #           - X-Amz-User-Agent
      - http:
          path: /api/devices/connected
          method: GET
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
          cors:  
            origin: ${self:custom.corsOrigin}
            headers:
                - Content-Type
                - Authorization
                - X-Amz-Date
                - X-Api-Key
                - X-Amz-Security-Token
                - X-Amz-User-Agent
            allowCredentials: true 
      # AUTOMATIONS
      - http:
          path: /api/automations
          method: GET
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
          cors:  
            origin: ${self:custom.corsOrigin}
            headers:
                - Content-Type
                - Authorization
                - X-Amz-Date
                - X-Api-Key
                - X-Amz-Security-Token
                - X-Amz-User-Agent
            allowCredentials: true 
      - http:
          path: /api/automations
          method: POST
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
          cors:  
            origin: ${self:custom.corsOrigin}
            headers:
                - Content-Type
                - Authorization
                - X-Amz-Date
                - X-Api-Key
                - X-Amz-Security-Token
                - X-Amz-User-Agent
            allowCredentials: true 
      - http:
          path: /api/automations/{automationId}
          method: GET
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
          cors:  
            origin: ${self:custom.corsOrigin}
            headers:
                - Content-Type
                - Authorization
                - X-Amz-Date
                - X-Api-Key
                - X-Amz-Security-Token
                - X-Amz-User-Agent
            allowCredentials: true 
      - http:
          path: /api/automations/{automationId}
          method: DELETE
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
          cors: 
            origin: ${self:custom.corsOrigin}
            headers:
                - Content-Type
                - Authorization
                - X-Amz-Date
                - X-Api-Key
                - X-Amz-Security-Token
                - X-Amz-User-Agent
            allowCredentials: true
      - http:
          path: /api/automations/{automationId}/state
          method: POST
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
          cors:  
            origin: ${self:custom.corsOrigin}
            headers:
                - Content-Type
                - Authorization
                - X-Amz-Date
                - X-Api-Key
                - X-Amz-Security-Token
                - X-Amz-User-Agent
            allowCredentials: true 
      - http:
          path: /api/automations/{automationId}/start
          method: POST
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
          cors:  
            origin: ${self:custom.corsOrigin}
            headers:
                - Content-Type
                - Authorization
                - X-Amz-Date
                - X-Api-Key
                - X-Amz-Security-Token
                - X-Amz-User-Agent
            allowCredentials: true 
      - http:
          path: /api/automations/clean
          method: POST
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
          cors:  
            origin: ${self:custom.corsOrigin}
            headers:
                - Content-Type
                - Authorization
                - X-Amz-Date
                - X-Api-Key
                - X-Amz-Security-Token
                - X-Amz-User-Agent
            allowCredentials: true 
          
      # COST API
      - http:
          path: /api/costs
          method: GET
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
          cors:  
            origin: ${self:custom.corsOrigin}
            headers:
                - Content-Type
                - Authorization
                - X-Amz-Date
                - X-Api-Key
                - X-Amz-Security-Token
                - X-Amz-User-Agent
            allowCredentials: true 
      
      # TOKEN 
      - http:
          path: /api/deviceToken
          method: GET
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
          cors:  
            origin: ${self:custom.corsOrigin}
            headers:
                - Content-Type
                - Authorization
                - X-Amz-Date
                - X-Api-Key
                - X-Amz-Security-Token
                - X-Amz-User-Agent
            allowCredentials: true
      - http:
          path: /api/websocketJwt
          method: GET
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
          cors:  
            origin: ${self:custom.corsOrigin}
            headers:
                - Content-Type
                - Authorization
                - X-Amz-Date
                - X-Api-Key
                - X-Amz-Security-Token
                - X-Amz-User-Agent
            allowCredentials: true
            
    environment:
      AUTOMATIONS_FUNCTION_ARN: 
        Fn::GetAtt: 
            - AutomationsHandlerLambdaFunction  
            - Arn    
  calculateMonthlyCost:
    handler: src/statistics_handler.handle
    events:
      - schedule:
          name: CalculateMonthlyCostRule
          description: "Triggers the Lambda function at the end of each month to calculate monthly cost"
          rate: cron(0 0 L * ? *) 
          enabled: true

resources:
  Resources:
    ClientsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.CLIENTS_TABLE_NAME}
        AttributeDefinitions:
          - AttributeName: connectionId
            AttributeType: S
        KeySchema:
          - AttributeName: connectionId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 2
          WriteCapacityUnits: 2

    IRRemotes:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.REMOTES_TABLE_NAME}
        AttributeDefinitions:
          - AttributeName: remoteName
            AttributeType: S
        KeySchema:
          - AttributeName: remoteName
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 2
          WriteCapacityUnits: 2

    IoTDevices:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.IOT_DEVICES_TABLE_NAME}
        AttributeDefinitions:
          - AttributeName: macAddress
            AttributeType: S
        KeySchema:
          - AttributeName: macAddress
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 2
          WriteCapacityUnits: 2

    RequestPool:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.REQUEST_POOL_TABLE_NAME}
        AttributeDefinitions:
          - AttributeName: requestId
            AttributeType: S
        KeySchema:
          - AttributeName: requestId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5

    Automations:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.AUTOMATIONS_TABLE_NAME}
        AttributeDefinitions:
          - AttributeName: automationId
            AttributeType: S
        KeySchema:
          - AttributeName: automationId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
    # Statistics is going to be a single row table containing info for whole app. The id is going to be `STATISTICS_ID`
    Statistics:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.STATISTICS_TABLE_NAME}
        AttributeDefinitions:
          - AttributeName: statisticsId
            AttributeType: S
        KeySchema:
          - AttributeName: statisticsId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    
    CognitoUserPool:
      Type: "AWS::Cognito::UserPool"
      Properties:
        MfaConfiguration: OFF
        UserPoolName: ${self:provider.environment.COGNITO_USER_POOL_NAME}
        UsernameAttributes:
          - email
        Schema:
          - Name: nickname
            AttributeDataType: String
            Mutable: true
            Required: false
        Policies:
          PasswordPolicy:
            MinimumLength: 6
            RequireLowercase: False
            RequireNumbers: True
            RequireSymbols: False
            RequireUppercase: False

    CognitoUserPoolClient:
      Type: "AWS::Cognito::UserPoolClient"
      Properties:
        ClientName: ${self:provider.environment.COGNITO_USER_POOL_CLIENT_NAME}
        GenerateSecret: False
        UserPoolId:
          Ref: CognitoUserPool
        AccessTokenValidity: 5
        IdTokenValidity: 5
        RefreshTokenValidity: 30  
        TokenValidityUnits:
          AccessToken: minutes
          IdToken: minutes
          RefreshToken: days
        ExplicitAuthFlows:
          - "ALLOW_CUSTOM_AUTH"
          - "ALLOW_ADMIN_USER_PASSWORD_AUTH"
          - "ALLOW_REFRESH_TOKEN_AUTH"
          - "ALLOW_USER_SRP_AUTH"
        SupportedIdentityProviders:
          - COGNITO

    ApiGatewayAuthorizer:
      DependsOn:
        - ApiGatewayRestApi
        - CognitoUserPool
      Type: AWS::ApiGateway::Authorizer
      Properties:
        Name: cognito-authorizer
        IdentitySource: method.request.header.Authorization
        RestApiId:
          Ref: ApiGatewayRestApi
        Type: COGNITO_USER_POOLS
        ProviderARNs:
          - Fn::GetAtt: [CognitoUserPool, Arn]

    ApiGatewayGlobalOptions:
      Type: AWS::ApiGateway::Method
      Properties:
        AuthorizationType: NONE
        HttpMethod: OPTIONS
        ResourceId:
          Fn::GetAtt:
            - ApiGatewayRestApi
            - RootResourceId
        RestApiId:
          Ref: ApiGatewayRestApi
        Integration:
          Type: MOCK
          IntegrationResponses:
            - StatusCode: 200
              ResponseParameters:
                method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'"
                method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET,POST,PUT,DELETE,PATCH'"
                method.response.header.Access-Control-Allow-Origin: "'${self:custom.corsOrigin}'"
          RequestTemplates:
            application/json: "{\"statusCode\": 200}"
        MethodResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: true
              method.response.header.Access-Control-Allow-Methods: true
              method.response.header.Access-Control-Allow-Origin: true
