service: aws-remote-websocket-serverless

frameworkVersion: '3'

provider:
  name: aws
  runtime: python3.12
  stage: ${opt:stage, 'dev'}
  region: eu-central-1
  timeout: 60
  httpApi:
      cors: true
  iamRoleStatements:
    - Effect: Allow
      Action:
        - "lambda:InvokeFunction"
      Resource:
        - "*"

  iam:
    role:
      statements:
        - Effect: "Allow"
          Action:
            - "events:PutRule"
            - "events:PutTargets"
            - "events:DeleteRule"
            - "events:RemoveTargets"
          Resource: "*"  

        - Effect: "Allow"
          Action:
            - "lambda:InvokeFunction"
          Resource: "*"

        - Effect: "Allow"
          Action:
            - "ce:GetCostAndUsage"
          Resource: "*"

        - Effect: Allow
          Action:
            - iam:CreateRole
            - iam:PutRolePolicy
            - iam:PassRole
            - iam:AttachRolePolicy
            - iam:GetRole
            - scheduler:CreateSchedule
            - scheduler:GetSchedule 
            - scheduler:UpdateSchedule 
            - scheduler:DeleteSchedule
          Resource: "*"

        - Effect: Allow
          Action:
            - "dynamodb:GetItem"
            - "dynamodb:PutItem"
            - "dynamodb:UpdateItem"
            - "dynamodb:DeleteItem"
            - "dynamodb:Scan"
          Resource:
            - { "Fn::GetAtt": ["ClientsTable", "Arn"] }

        - Effect: Allow
          Action:
            - "dynamodb:GetItem"
            - "dynamodb:PutItem"
            - "dynamodb:UpdateItem"
            - "dynamodb:DeleteItem"
            - "dynamodb:Scan"
          Resource:
            - { "Fn::GetAtt": ["IRRemotes", "Arn"] }

        - Effect: Allow
          Action:
            - "dynamodb:ConditionCheckItem"
            - "dynamodb:GetItem"
            - "dynamodb:PutItem"
            - "dynamodb:UpdateItem"
            - "dynamodb:DeleteItem"
            - "dynamodb:Scan"
            - "dynamodb:Query"
          Resource:
            - { "Fn::GetAtt": ["IoTDevices", "Arn"] }
        - Effect: Allow
          Action:
            - "dynamodb:ConditionCheckItem"
            - "dynamodb:GetItem"
            - "dynamodb:PutItem"
            - "dynamodb:UpdateItem"
            - "dynamodb:DeleteItem"
            - "dynamodb:Scan"
            - "dynamodb:Query"
          Resource:
            - { "Fn::GetAtt": ["Automations", "Arn"] }
        - Effect: Allow
          Action:
            - "dynamodb:ConditionCheckItem"
            - "dynamodb:GetItem"
            - "dynamodb:PutItem"
            - "dynamodb:UpdateItem"
            - "dynamodb:DeleteItem"
            - "dynamodb:Scan"
            - "dynamodb:Query"
          Resource:
            - { "Fn::GetAtt": ["RequestPool", "Arn"] }
        - Effect: Allow
          Action:
            - "dynamodb:ConditionCheckItem"
            - "dynamodb:GetItem"
            - "dynamodb:PutItem"
            - "dynamodb:UpdateItem"
            - "dynamodb:DeleteItem"
            - "dynamodb:Scan"
            - "dynamodb:Query"
          Resource:
            - { "Fn::GetAtt": ["Statistics", "Arn"] }

  environment: 
    CLIENTS_TABLE_NAME: ${self:provider.stage}WSClients
    REMOTES_TABLE_NAME: ${self:provider.stage}IRRemotes
    IOT_DEVICES_TABLE_NAME: ${self:provider.stage}IoTDevices
    REQUEST_POOL_TABLE_NAME: ${self:provider.stage}RequestPool
    AUTOMATIONS_TABLE_NAME: ${self:provider.stage}Automations
    STATISTICS_TABLE_NAME: ${self:provider.stage}Statistics
    WSSAPIGATEWAYENDPOINT:
      Fn::Join:
        - ""
        - - "https://"
          - Ref: WebsocketsApi
          - ".execute-api."
          - Ref: AWS::Region
          - ".amazonaws.com/${sls:stage}"


functions:
  automationsHandler:
    handler: src/automations_handler.handle  

  websocketHandler:
    handler: src/websockets_router.handle
    events:
      - websocket:
          route: $connect
      - websocket:
          route: $disconnect
      - websocket:
          route: cmd
      - websocket:
          route: ack
      - websocket:
          route: error

  httpDataHandler:
    handler: src/http_router.handle
    events:
      # REMOTES
      - httpApi:
          path: /api/remotes
          method: GET
      - httpApi:
          path: /api/remotes
          method: POST          
      - httpApi:
          path: /api/remotes/{remoteName}
          method: GET
      - httpApi:
          path: /api/remotes/{remoteName}
          method: DELETE
          
      - httpApi:
          path: /api/remotes/{remoteName}/buttons
          method: POST
      - httpApi:
          path: /api/remotes/{remoteName}/buttons/{buttonName}
          method: DELETE
      # DEVICES
      - httpApi:
          path: /api/devices
          method: GET
      - httpApi:
          path: /api/devices
          method: POST
      - httpApi:
          path: /api/devices/{macAddress}
          method: GET
      - httpApi:
          path: /api/devices/{macAddress}
          method: PUT
      - httpApi:
          path: /api/devices/{macAddress}
          method: DELETE
      - httpApi:
          path: /api/devices/connected
          method: GET
      # AUTOMATIONS
      - httpApi:
          path: /api/automations
          method: GET
      - httpApi:
          path: /api/automations
          method: POST
      - httpApi:
          path: /api/automations/{automationId}
          method: GET
      - httpApi:
          path: /api/automations/{automationId}
          method: DELETE
      - httpApi:
          path: /api/automations/{automationId}/state
          method: POST
      - httpApi:
          path: /api/automations/{automationId}/start
          method: POST
      # COST API
      - httpApi:
          path: /api/costs
          method: GET
    environment:
      AUTOMATIONS_FUNCTION_ARN: 
        Fn::GetAtt: 
            - AutomationsHandlerLambdaFunction  
            - Arn    
  calculateMonthlyCost:
    handler: src/statistics_handler.handle
    events:
      - schedule:
          name: CalculateMonthlyCostRule
          description: "Triggers the Lambda function at the end of each month to calculate monthly cost"
          rate: cron(0 0 L * ? *) 
          enabled: true
             


plugins:
  - serverless-python-requirements

resources:
  Resources:
    ClientsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.CLIENTS_TABLE_NAME}
        AttributeDefinitions:
          - AttributeName: connectionId
            AttributeType: S
        KeySchema:
          - AttributeName: connectionId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 2
          WriteCapacityUnits: 2

    IRRemotes:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.REMOTES_TABLE_NAME}
        AttributeDefinitions:
          - AttributeName: remoteName
            AttributeType: S
        KeySchema:
          - AttributeName: remoteName
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 2
          WriteCapacityUnits: 2

    IoTDevices:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.IOT_DEVICES_TABLE_NAME}
        AttributeDefinitions:
          - AttributeName: macAddress
            AttributeType: S
        KeySchema:
          - AttributeName: macAddress
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 2
          WriteCapacityUnits: 2

    RequestPool:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.REQUEST_POOL_TABLE_NAME}
        AttributeDefinitions:
          - AttributeName: requestId
            AttributeType: S
        KeySchema:
          - AttributeName: requestId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5

    Automations:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.AUTOMATIONS_TABLE_NAME}
        AttributeDefinitions:
          - AttributeName: automationId
            AttributeType: S
        KeySchema:
          - AttributeName: automationId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
    # Statistics is going to be a single row table containing info for whole app. The id is going to be `STATISTICS_ID`
    Statistics:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.STATISTICS_TABLE_NAME}
        AttributeDefinitions:
          - AttributeName: statisticsId
            AttributeType: S
        KeySchema:
          - AttributeName: statisticsId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    